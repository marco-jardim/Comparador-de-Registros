name: Build and Release

permissions:
  contents: write
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine version
        id: version
        shell: bash
        run: |
          git fetch --tags
          last=$(git tag -l 'v*' | sort -V | tail -n1)
          if [ -z "$last" ]; then
            ver="0.1"
          else
            num=${last#v0.}
            num=$((num + 1))
            ver="0.$num"
          fi
          today=$(date +%F)
          {
            echo "# Gerado automaticamente pelo pipeline"
            echo "APP_VERSION=$ver"
            echo "APP_VERSION_DATE=$today"
          } > version.env
          echo "APP_VERSION=$ver" >> "$GITHUB_ENV"
          echo "APP_VERSION_DATE=$today" >> "$GITHUB_ENV"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller -r requirements.txt

      - name: Build executable
        run: pyinstaller --noconfirm --onefile src/gui.py

      - name: Rename binary
        shell: bash
        run: |
          EXT=""
          if [ "$RUNNER_OS" = "Windows" ]; then
            EXT=".exe"
          fi
          mv dist/gui${EXT} Comparador-${RUNNER_OS}${EXT}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Comparador-${{ runner.os }}
          path: Comparador-${{ runner.os }}*

  release:
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
        # precisamos do histórico completo para as tags
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Determine next version
        id: version
        run: |
          git fetch --tags
          last=$(git tag -l 'v*' | sort -V | tail -n1)
          if [ -z "$last" ]; then
            ver="0.1"
          else
            num=${last#v0.}
            num=$((num + 1))
            ver="0.$num"
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Extrair commits desde a última tag
        id: commits
        run: |
          prev_tag=$(git tag -l 'v*' | sort -V | tail -n2 | head -n1)
          git log "$prev_tag"..HEAD --pretty=format:"- %s" > changelog.md
          # transforma quebras de linha em \n
          logs=$(awk '{printf "%s\\n", $0}' changelog.md)
          echo "logs=$logs" >> "$GITHUB_OUTPUT"

      - name: Gerar release notes com curl
        id: ai_notes_curl
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          prev=$(git tag -l 'v*' | sort -V | tail -n2 | head -n1)
          logs=$(git log $prev..HEAD --pretty=format:"- %s")
          summary=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
                --arg logs "$logs" \
                '{
                  model: "gpt-4o-mini",
                  messages: [
                    {role: "system", content: "Você é um gerador de changelog. Resuma as mudanças de forma clara e concisa."},
                    {role: "user", content: $logs}
                  ]
                }')"
          )
          notes=$(echo "$summary" | jq -r '.choices[0].message.content')
          # Aqui vem a alteração:
          printf 'release_notes<<EOF\n%s\nEOF\n' "$notes" >> "$GITHUB_OUTPUT"

      - name: Gerar release name com curl
        id: ai_name_curl
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          version="v${{ steps.version.outputs.version }}"
          logs="${{ steps.commits.outputs.logs }}"
          prompt="Crie um codinome engraçado e criativo para a release $version, considerando estas mudanças:\n$logs\n\nResponda apenas com o codinome, sem explicações extras."
          summary=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg prompt "$prompt" \
              '{
                model: "gpt-4o-mini",
                messages: [
                  {role: "system", content: "Você é um gerador de nomes de release engraçados e criativos que usem o contexto das mudanças para inspirar o codinome. Responda apenas com o codinome, sem explicações extras."},
                  {role: "user", content: $prompt}
                ]
              }')"
          )
          raw_name=$(echo "$summary" | jq -r '.choices[0].message.content')
          name=$(echo "$raw_name" | sed -E 's/^[[:space:]]*(Codinome( da release)?:)?[[:space:]]*"?//I; s/"$//')
          printf 'release_name<<EOF\n%s\nEOF\n' "$name" >> "$GITHUB_OUTPUT"

      - name: Gerar release joke com curl
        id: ai_joke_curl
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          logs="${{ steps.commits.outputs.logs }}"
          prompt="Crie uma piada curta e engraçada sobre estas mudanças:\n$logs"
          summary=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg prompt "$prompt" \
             '{
               model: "gpt-4o-mini",
               messages: [
                 {role: "system", content: "Você é um gerador de piadas curtas e engraçadas baseado no changelog."},
                 {role: "user", content: $prompt}
               ]
             }')"
          )
          joke=$(echo "$summary" | jq -r '.choices[0].message.content')
          printf 'release_joke<<EOF\n%s\nEOF\n' "$joke" >> "$GITHUB_OUTPUT"

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          artifacts: artifacts/**
          body: |
            **Codinome da release:** ${{ steps.ai_name_curl.outputs.release_name }}

            ${{ steps.ai_notes_curl.outputs.release_notes }}

            **Piada da release:**
            ${{ steps.ai_joke_curl.outputs.release_joke }}
